class void {}
class double {}
class boolean {}

interface IInteger {}
class byte implements IInteger {}
class int implements IInteger {}
class long implements IInteger {}
class uint implements IInteger {}
class ulong implements IInteger {}

class String {
    ulong length() {}
    Pointer<byte> asPointer() {}

    Array<byte> asByteArray() {
        return asPointer().asArray(length() + 1);
    }
}

class Pointer<T> {
    T deref(ulong index) {}
    Array<T> asArray(ulong length) {}
}

class Array<T> {
    Pointer<T> _elements;
    long length;

    T get(long index) {
        return _elements.deref(index);
    }
}

class ArrayList<T> {
    Array<T> _array;
    long length;

    ArrayList() {
        _array = new T[8];
        length = 0;
    }

    T get(long index) {
        return _array[index];
    }

    void set(long index, T newValue) {
        _array[index] = newValue;
    }

    long push(T value) {
        _maybeGrow();
        _array[length] = value;
        length = length + 1;
        return length;
    }

    T pop() {
        length = length - 1;
        return _array[length];
    }

    void _maybeGrow() {
        if (length < _array.length) {
            return;
        }
        var newArray = new T[_array.length * 2];
        for (long i = 0; i < _array.length; i = i + 1) {
            newArray[i] = _array[i];
        }
        delete _array;
        _array = newArray;
    }

    Array<T> asArray() {
        var newArr = new T[length];
        for (long i = 0; i < length; i = i + 1) {
            newArr[i] = _array[i];
        }
        return newArr;
    }
}

class File {
    int _fd;

    File(int fd) { _fd = fd; }

    static File open(String pathname, int flags) {}
    int close() {}
    long lseek(int offset, int whence) {}
    ulong read(Array<byte> buf, ulong count) {}
    ulong write(Array<byte> buf, ulong count) {}
}

class Printer {
    File outFile;

    Printer(File outFile) {
        this.outFile = outFile;
    }

    void printChar(byte value) {
        var buf = new byte[1];
        buf[0] = value;
        outFile.write(buf, 1);
        delete buf;
    }

    void printString(String s) {
        var bytes = s.asByteArray();

        for (var i = 0; i < bytes.length - 1; i = i + 1) {
            printChar(bytes[i]);
        }

        delete bytes;
    }

    void printInt<T: IInteger>(T value) {
        var digits = new ArrayList<byte>();

        if (value == 0) {
            digits.push(0);
        } else {
            while (value > 0) {
                digits.push(value % 10);
                value = value / 10;
            }
        }

        var buf = new byte[digits.length];
        for (var i = digits.length - 1; i >= 0; i = i - 1) {
            var charCode = digits.get(i) + 48;
            buf[digits.length - (i + 1)] = charCode;
        }
        outFile.write(buf, digits.length);
        delete digits._array;
        delete digits;
        delete buf;
    }

    void newLine() {
        printChar(10);
    }
}
